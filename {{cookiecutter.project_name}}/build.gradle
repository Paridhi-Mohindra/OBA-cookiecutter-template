plugins {
    id 'java'
    id 'distribution'
    id 'checkstyle'
    id 'jacoco'
    id 'findbugs'
    id 'pmd'

    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'me.champeau.gradle.jmh' version '0.3.0'
    id 'com.palantir.jacoco-coverage' version '0.4.0'
    id 'com.palantir.jacoco-full-report' version '0.4.0'
}

repositories {
    jcenter()
}

configurations.all {
    exclude module: 'log4j'
    exclude module: 'commons-logging'
    exclude module: 'slf4j-log4j12'
}

dependencies {
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.slf4j:slf4j-api:1.7.21'

    runtime 'ch.qos.logback:logback-classic:1.1.7'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.21'
    runtime 'org.slf4j:jcl-over-slf4j:1.7.21'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.assertj:assertj-core:3.5.1'
    testCompile 'org.mockito:mockito-core:2.0.38-beta'
}

uploadArchives.enabled = false

shadowJar {
    classifier = ''
    version = ''
    manifest {
        attributes 'Main-Class': '{{cookiecutter.package}}.Main'
    }
}

checkstyle {
    configFile = file("checkstyle.xml")
    ignoreFailures = false
    toolVersion = '7.0'
    sourceSets = [sourceSets.main]
}

findbugs {
    toolVersion = '3.0.1'
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    reportLevel = 'medium'
}

pmd {
    ignoreFailures = false
    ruleSetFiles = files("pmd-rulesets.xml")
    sourceSets = [sourceSets.main]
    toolVersion = '5.5.0'
}

jacocoCoverage {
    fileThreshold 0.8
    fileThreshold 0.0, 'Main.java'
}

check.dependsOn 'checkCoverage'

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

distTar {
    compression = 'bzip2'
    extension = 'tar.bz2'
}

distributions {
    main {
        contents {
            from "${projectDir}/src/main/dist"
            into("bin") {
                from shadowJar
            }
        }
    }
}

// jmh {
//     profilers = ['perfasm']
//     timeUnit = 'us'
// }

